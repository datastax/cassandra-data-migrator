spark.migrate.source.isAstra                                    false
spark.migrate.source.host                                       localhost
spark.migrate.source.username                                   some-username
spark.migrate.source.password                                   some-secret-password
spark.migrate.source.read.consistency.level                     LOCAL_QUORUM
spark.migrate.source.keyspaceTable                              test.a1
spark.migrate.source.keyspaceFilterColumn                       test.a1.col1
spark.migrate.source.trimColumnRow                              false

spark.migrate.destination.isAstra                               true
spark.migrate.destination.scb                                   file:///aaa/bbb/secure-connect-enterprise.zip
spark.migrate.destination.username                              client-id
spark.migrate.destination.password                              client-secret
spark.migrate.destination.read.consistency.level                LOCAL_QUORUM
spark.migrate.destination.keyspaceTable                         test.a2
spark.migrate.destination.autocorrect.missing                   false
spark.migrate.destination.autocorrect.mismatch                  false

spark.migrate.maxRetries                                        10
spark.migrate.readRateLimit                                     20000
spark.migrate.writeRateLimit                                    20000
spark.migrate.splitSize                                         10000
spark.migrate.batchSize                                         5
spark.migrate.coveragePercent                                   100
spark.migrate.printStatsAfter                                   100000

spark.migrate.query.cols.select                                 partition-key,clustering-key,order-date,amount,writetime(order-date),writetime(amount),ttl(order-date),ttl(amount)
spark.migrate.diff.select.types                                 9,1,4,3
spark.migrate.query.cols.id                                     partition-key,clustering-key
spark.migrate.query.cols.id.types                               9,1
spark.migrate.query.cols.partitionKey                           partition-key

spark.migrate.query.cols.insert                                 partition-key,clustering-key,order-date,amount
spark.migrate.query.cols.insert.types                           9,1,4,3

spark.migrate.source.counterTable                               false
spark.migrate.source.counterTable.update.cql
spark.migrate.source.counterTable.update.max.counter.index      0
spark.migrate.source.counterTable.update.select.index           0

spark.migrate.preserveTTLWriteTime                              true
spark.migrate.source.ttl.cols                                   6,7

spark.migrate.source.writeTimeStampFilter                       false
spark.migrate.source.writeTimeStampFilter.cols                  4,5
spark.migrate.source.minWriteTimeStampFilter                    0
spark.migrate.source.maxWriteTimeStampFilter                    9223372036854775807

########################## ONLY USE if SSL clientAuth is enabled on source Cassandra/DSE ###############################
#spark.migrate.source.trustStore.path
#spark.migrate.source.trustStore.password
#spark.migrate.source.trustStore.type                            JKS
#spark.migrate.source.keyStore.path
#spark.migrate.source.keyStore.password
#spark.migrate.source.enabledAlgorithms                          TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA

####################### ONLY USE if SSL clientAuth is enabled on destination Cassandra/DSE #############################
#spark.migrate.destination.trustStore.path
#spark.migrate.destination.trustStore.password
#spark.migrate.destination.trustStore.type                       JKS
#spark.migrate.destination.keyStore.path
#spark.migrate.destination.keyStore.password
#spark.migrate.destination.enabledAlgorithms                     TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA

########################################################################################################################
# Following are the supported data types and their corresponding [Cassandra data-types]
# 0: String [ascii, text, varchar]
# 1: Integer [int, smallint]
# 2: Long [bigint, counter]
# 3: Double [double]
# 4: Instant [time, timestamp]
# 5: Map (separate type by %) [map] - Example: 5%1%0 for map<int, text>
# 6: List (separate type by %) [list] - Example: 6%0 for list<text>
# 7: ByteBuffer [blob]
# 8: Set (separate type by %) [set] - Example: 8%0 for set<text>
# 9: UUID [uuid, timeuuid]
# 10: Boolean [boolean]
# 11: TupleValue [tuple]
# 12: Float (float)
# 13: TinyInt [tinyint]
# 14: BigDecimal (decimal)
# 15: LocalDate (date)
# 16: UDT [any user-defined-type created using 'CREATE TYPE']
#
# Note:
# Enable "spark.migrate.preserveTTLWriteTime" only if you want to migrate writetimes and TTLs
#
# "spark.migrate.source.ttl.cols" - Comma separated column indexes from "spark.migrate.query.cols.select".
#  Script will only use the largest value per row.
#
# Include "writetime(column-name)" in "spark.migrate.query.cols.select" only if you want to use "writeTimeStampFilter" filter
#
# "spark.migrate.source.writeTimeStampFilter.cols" - Comma separated column indexes from "spark.migrate.query.cols.select".
#  Script will only use the largest value per row.
#
# Default value for "spark.migrate.source.maxWriteTimeStampFilter" is alway "9223372036854775807" (max long value)
#
# Properties "spark.migrate.query.cols.insert" and "spark.migrate.query.cols.insert.types" are required for "Migrate" job,
#  however they can be left empty for "DiffData" job
#
# Frozen has no impact on the mapping of Collections (Map/List/Set) - Example: 5%1%0 for frozen<map<int, text>>
#
########################################################################################################################
